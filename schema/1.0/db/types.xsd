<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="types" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="types">
    <xs:annotation>
      <xs:documentation> Spawnable types configuration. Used to define all available spawnable types
        and restrictions on their presence in the world. Can be split into multiple files.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="type">
          <xs:annotation>
            <xs:documentation>Spawnable type definition. It is not necessary to define all the
              attributes if you are only overriding an existing type.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="nominal" type="xs:nonNegativeInteger">
                  <xs:annotation>
                    <xs:documentation>The total amount of an item the CE will aim to spawn.</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element name="lifetime">
                  <xs:annotation>
                    <xs:documentation> The amount of time (in seconds) the item stays on the map
                      before despawning. </xs:documentation>
                  </xs:annotation>
                  <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                      <xs:maxInclusive value="3888000" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="restock" type="xs:nonNegativeInteger">
                  <xs:annotation>
                    <xs:documentation> The amount of time (in seconds) between each spawn of an
                      item, once the minimum value is reached, until the nominal value is on the
                      map. </xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element name="min" type="xs:nonNegativeInteger">
                  <xs:annotation>
                    <xs:documentation>The lower threshold to tell the CE when to start spawning more
                      (up to nominal).</xs:documentation>
                  </xs:annotation>
                </xs:element>
                <xs:element name="quantmin">
                  <xs:annotation>
                    <xs:documentation>The minimum percentage of items in the stack. A value of -1
                      indicates that the item is not stackable.</xs:documentation>
                  </xs:annotation>
                  <xs:simpleType>
                    <xs:restriction base="xs:int">
                      <xs:minInclusive value="-1" />
                      <xs:maxInclusive value="100" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="quantmax">
                  <xs:annotation>
                    <xs:documentation>The maximum percentage of items in the stack. A value of -1
                      indicates that the item is not stackable.</xs:documentation>
                  </xs:annotation>
                  <xs:simpleType>
                    <xs:restriction base="xs:int">
                      <xs:minInclusive value="-1" />
                      <xs:maxInclusive value="100" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="cost">
                  <xs:annotation>
                    <xs:documentation>The setting of the priority (in percent) for the spawn rates.</xs:documentation>
                  </xs:annotation>
                  <xs:simpleType>
                    <xs:restriction base="xs:nonNegativeInteger">
                      <xs:maxInclusive value="100" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="flags">
                  <xs:annotation>
                    <xs:documentation>Flags used to decide whether stored items count towards
                      nominal value.</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:attribute name="count_in_cargo" type="xs:boolean" use="required">
                      <xs:annotation>
                        <xs:documentation>Whether items in pockets, bags, cars and rendered zombies
                          count towards nominal value.</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="count_in_hoarder" type="xs:boolean" use="required">
                      <xs:annotation>
                        <xs:documentation>Whether items stored in tents, barrels and chests count
                          towards nominal value.</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="count_in_map" type="xs:boolean" use="required">
                      <xs:annotation>
                        <xs:documentation> Whether items spawned on the map count towards nominal
                          value. </xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="count_in_player" type="xs:boolean" use="required">
                      <xs:annotation>
                        <xs:documentation>Whether to count items carried by players (including
                          players who are currently offline) towards nominal value.</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="crafted" type="xs:boolean" use="required">
                      <xs:annotation>
                        <xs:documentation>Only affects craftable items such as fireplaces, fences
                          and so on. Indicates whether the item is craftable in game.</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="deloot" type="xs:boolean" use="required">
                      <xs:annotation>
                        <xs:documentation>Indicates whether items can only spawn with Dynamic Event
                          such as heli crashes and police wrecks, if they also have the correct
                          category and usage tags to match.</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                  </xs:complexType>
                </xs:element>
                <xs:element name="category">
                  <xs:annotation>
                    <xs:documentation>The category label for the type. It affects where it spawns
                      and how it spawns. The category must be defined in `cfglimitsdefinition.xml`.</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:attribute name="name" type="xs:string" use="required" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="tag">
                  <xs:annotation>
                    <xs:documentation>The tag label for the type. The meaning depends on the map
                      setup. The tag must be defined in `cfglimitsdefinition.xml`. Type can have
                      more than one tag label. </xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:attribute name="name" type="xs:string" />
                  </xs:complexType>
                </xs:element>
                <xs:element name="usage">
                  <xs:annotation>
                    <xs:documentation>The usage label for the type. The meaning depends on the map
                      setup. Usually, affects the group in which area an item spawns. The usage must
                      be defined in `cfglimitsdefinition.xml` or `cfglimitsdefinitionuser.xml`. Type
                      can have more than one usage label. </xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:attribute name="name" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>The value defined in `cfglimitsdefinition.xml`</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="user" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>The value defined in `cfglimitsdefinitionuser.xml`</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                  </xs:complexType>
                </xs:element>
                <xs:element name="value">
                  <xs:annotation>
                    <xs:documentation>The value label for the type. The meaning depends on the map
                      setup. Adjusts the value group of an item, affecting how and where the item
                      spawns on the map. The value must be defined in `cfglimitsdefinition.xml` or
                      `cfglimitsdefinitionuser.xml`. Type can have more than one value label.</xs:documentation>
                  </xs:annotation>
                  <xs:complexType>
                    <xs:attribute name="name" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>The value defined in `cfglimitsdefinition.xml`</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="user" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>The value defined in `cfglimitsdefinitionuser.xml`</xs:documentation>
                      </xs:annotation>
                    </xs:attribute>
                  </xs:complexType>
                </xs:element>
              </xs:choice>
            </xs:sequence>
            <xs:attribute name="name" type="xs:string" use="required">
              <xs:annotation>
                <xs:documentation>The class name of the spawnable type.</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>